import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Random;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {

    public static int[] roll(int rolls) {
        int[] values = new int[rolls];
        Random rnd = new Random();
        for (int i = 0; i < values.length; i++) {
            int roll = rnd.nextInt(6) + 1;
            values[i] = roll;
        }
        return values;
    }

    public static boolean containsDuplicates(int[] arr) {
        boolean hasDupe = false;
        outer: for (int i = 0; i < arr.length -1; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    hasDupe = true;
                    break outer;
                }
            }
        }
        return hasDupe;
    }

    public static double average(int[] arr) {
        double average = 0;
        for (int value : arr)
            average += value;
        return average/ (double)arr.length;
    }

    public static int[] lowestAverage(int[][] arraySet) {
        double lowestAvg = average(arraySet[0]);
        int lowestIndex = 0;
        for (int i = 1; i < arraySet.length; i++) {
            double setAvg = average(arraySet[i]);
            if (setAvg < lowestAvg) {
                lowestAvg = setAvg;
                lowestIndex = i;
            }
        }
        return arraySet[lowestIndex];
    }

    /*This function takes a pre-determined set of daily temperatures each week for a whole month and finds the highest and lowest temperatures along with tracking all unique temperatures.
    * It will then print out the high and low and any temperature between those two values that were not seen
    */
    public static void analyzeData() {
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        HashSet<Integer> temps = new HashSet<>();
        int high = weeklyMonthTemperatures[0][0];
        int low = weeklyMonthTemperatures[0][0];

        for (int[] arr : weeklyMonthTemperatures) {
            for (int temp : arr) {

                if (temp > high){
                    high = temp;
                }
                else if (temp < low) {
                    low = temp;
                }

                temps.add(temp);
            }
        }

        System.out.println("High: " + high);
        System.out.println("Low: " + low);
        for (int i = low; i < high; i++) {
            if (!temps.contains(i)) {
                System.out.println("Never saw temperature: " + i);
            }

        }
    }

    //TODO: Add logic to handle the instance of a tie
    public static String tally(List<String> votes) {

        HashMap<String, Integer> tallies = new HashMap<>();

        for (String vote : votes) {
            if (tallies.containsKey(vote)) {
               tallies.put(vote, tallies.get(vote) + 1);
            }
            else {
                tallies.put(vote, 1);
            }
        }

        int highestVotes = 0;
        String winner = "";
        for (String key : tallies.keySet()) {
            if (tallies.get(key) > highestVotes) {
                highestVotes = tallies.get(key);
                winner = key;
            }
        }

        return winner + " received the most votes!";
    }
}
